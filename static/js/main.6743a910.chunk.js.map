{"version":3,"sources":["assets/harv.png","Header.js","About.js","ArtDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","Component","About","src","harv","alt","ArtDisplay","artInfo","image","name","title","date","id","App","apiCall","mediumClick","axios","url","method","dataType","params","apikey","classification","size","page","state","then","results","console","log","artworks","data","records","allResults","setState","renderResults","randomPage","Math","floor","random","info","pages","length","selection","people","dated","imagecount","undefined","images","baseimageurl","result","handleClick","event","preventDefault","target","value","input","onClick","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6743a910.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/harv.de9b2e40.png\";","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n  render() {\n    return (\n        <div className=\"header\">\n          <h1>CE Art Trace</h1>\n        <a href=\"https://github.com/Edwardbacal/Edward-Bacal-Project-Five\"><button>github</button></a>\n        </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport harv from './assets/harv.png'\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"about\"> \n        <div className=\"wrapper\">\n          <h2>About</h2>\n          <div className=\"container\">\n            <img src={harv} alt=\"harvard art museums interior\"/>  \n            <div className=\"textContainer\">\n              <p>CE Art Trace is a React-based app that draws from the Harvard Art Museums' public API. This app draws on a databse of over 230,000 objects to select a random item, within a chosen medium. Please click on one of the buttons below to get your result!</p>\n              <p>CE Art Trace was developed and designed by <a href=\"https://edwarddbacal.com\">Edward Bacal</a> in June 2020. Expanded functionality coming soon!</p>\n            </div>\n          </div>\n          <div className=\"center\">\n            <button className=\"arrow\"><AnchorLink href='#start'>start! â–½</AnchorLink></button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nconst ArtDisplay = ({artInfo: {image, name, title, date}}) => {\n  return (\n    <div className=\"ArtDisplay clearfix\" id=\"display\">\n      <div className=\"imageCont\">\n        <img src={image} alt=\"\" />\n      </div>\n      <div className=\"displayText\">     \n        <h3>{name}</h3>\n        <h3>{title} </h3>\n        <h3>{date}</h3>\n        <AnchorLink href='#start'><button>Again!</button></AnchorLink>\n      </div>\n    </div>\n  )\n}\n\nexport default ArtDisplay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Header from './Header';\nimport About from './About';\nimport ArtDisplay from './ArtDisplay';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      result: {},\n      input: '',\n      page: 0,\n      allResults: [],\n    }\n  }\n  \n  apiCall = (mediumClick) => {\n    axios({\n      url: 'https://api.harvardartmuseums.org/object',\n      method: 'GET',\n      dataType: 'json',\n      params: {\n        apikey: '27755370-b4cc-11ea-be7e-875e5b266cbb',\n        classification: mediumClick,\n        size: 100,\n        page: this.state.page\n      }\n    }).then((results) => {\n      console.log(results)\n      // const resultArray = []\n      const artworks = results.data.records;\n      const expandedArray = this.state.allResults\n      if (!this.state.page){\n        const randomPage = Math.floor(Math.random() * results.data.info.pages)\n        this.setState({page: randomPage})\n        this.apiCall(mediumClick)\n      } else {\n        this.setState({ page: 0 })\n        this.renderResults(artworks)\n      }\n\n\n      // refactor into functions to decouple functions\n      // -> separate into functions to call it in different components. \n      // design patterns (e.g. mvc, observer pattern)\n\n      // artworks.forEach(result => {expandedArray.push(result)})\n      // console.log(resultArray)\n      // expandedArray.push([...resultArray])\n      // this.setState({allResults: expandedArray})\n      // if (this.state.page <= results.data.info.pages) {\n      //   const newPage = this.state.page + 1\n      //   this.setState({page: newPage})\n      //   this.apiCall(mediumClick)\n      // } else {\n      //   \n      // }\n    })\n  }\n    \n  \n  \n  renderResults = (artworks) => {\n    const random = artworks[Math.floor(Math.random() * artworks.length)]\n    console.log(random)\n    // console.log(typeof(random.images.length))\n    const selection = {\n      name: random.people ? random.people[0].name : \"Unknown\",\n      title: random.title,\n      date: random.dated,\n      image: random.imagecount && random.images !== undefined && random.images.length ? random.images[0].baseimageurl : \"https://ultravires.ca/wp/wp-content/uploads/2018/03/Then-and-Now_-no-image-found.jpg\"\n    }\n        this.setState({\n      result: selection\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    console.log(event.target.value);\n    const mediumClick = event.target.value\n    this.setState({\n      input: mediumClick\n    });\n    \n  this.apiCall(mediumClick)\n  }\n\n  // page: i + 1, // starts at 1 and incremented with every call\n  //   }\n  //   }).then((results) => {\n  // const totalPages = results.data.info.pages;\n  // this.setState({\n  //   totalPages,\n  //   // increment this state with every api call\n  //   page: this.state.page + 1,\n  // });\n\n\n\n\n   \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <About />\n        <div className=\"medium\" id=\"start\">\n          <h2>Select Medium</h2>\n          <div className=\"pic\">\n            <div className=\"rowOne\">\n              <AnchorLink href='#display'><button value=\"Paintings\" onClick={this.handleClick}>Painting</button></AnchorLink>\n              <AnchorLink href='#display'><button value =\"Sculpture\" onClick={this.handleClick}>Sculpture</button></AnchorLink>\n              <AnchorLink href='#display'><button value=\"Photographs\" onClick={this.handleClick}>Photography</button></AnchorLink>\n              <AnchorLink href='#display'><button value=\"Prints\" onClick={this.handleClick}>Prints</button></AnchorLink>\n              <AnchorLink href='#display'><button value=\"Audiovisual Works\" onClick={this.handleClick}>Audiovisual</button></AnchorLink>\n              <AnchorLink href='#display'><button value=\"Graphic Design\" onClick={this.handleClick}>Design</button></AnchorLink>\n            </div> \n              <ArtDisplay artInfo={this.state.result} />    \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}